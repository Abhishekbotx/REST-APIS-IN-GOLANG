 ┌────────────────────────────┐
 │        Program start        │
 └──────────────┬─────────────┘
                │
                ▼
   ┌─────────────────────────┐
   │ Load config (MustLoad)  │
   └─────────────┬───────────┘
                 │
                 ▼
   ┌─────────────────────────┐
   │ Setup router & handlers │
   └─────────────┬───────────┘
                 │
                 ▼
   ┌─────────────────────────┐
   │ Create http.Server      │
   └─────────────┬───────────┘
                 │
                 ▼
   ┌─────────────────────────────┐
   │ Setup channel "done"        │
   │ Listen for OS signals       │
   │ (Ctrl+C / kill / SIGTERM)   │
   └─────────────┬───────────────┘
                 │
                 ▼
   ┌─────────────────────────────┐
   │ Start server in goroutine   │
   │ (ListenAndServe, blocking)  │
   └─────────────┬───────────────┘
                 │
                 ▼
   ┌─────────────────────────────┐
   │ Main goroutine waits on     │
   │ `<-done` channel            │
   │ (blocked until signal)      │
   └─────────────┬───────────────┘
                 │
     [💥 User hits Ctrl+C or Docker stop]
                 │
                 ▼
   ┌─────────────────────────────┐
   │ Receive shutdown signal     │
   │ Continue main goroutine     │
   └─────────────┬───────────────┘
                 │
                 ▼
   ┌─────────────────────────────┐
   │ Graceful shutdown begins    │
   │ - Create context (5s)       │
   │ - Stop new connections      │
   │ - Finish ongoing requests   │
   └─────────────┬───────────────┘
                 │
      [⏳ Waits for requests or timeout]
                 │
                 ▼
   ┌─────────────────────────────┐
   │ Cancel context after 5s     │
   │ Server closes               │
   └─────────────┬───────────────┘
                 │
                 ▼
   ┌─────────────────────────────┐
   │ Logs "server shutdown ok"   │
   │ Program exits cleanly       │
   └─────────────────────────────┘


Go has no constructor like thing